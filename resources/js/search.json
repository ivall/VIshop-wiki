[[{"l":"Wstęp"},{"i":"czym-jest-vishop","l":"Czym jest VIshop?","p":["VIshop to darmowy itemshop Minecraft. Itemshop nie ma żadnych limitów, ani prowizji. Dzięki architekturze SaaS nie potrzebna jest dodatkowa maszyna, itemshop jest hostowany na serwerach VIshop."]},{"i":"jak-zacząć-korzystać-z-vishop","l":"Jak zacząć korzystać z VIshop?","p":["Pierwszym krokiem będzie zalogowanie do panelu VIshop. Po zalogowaniu tworzymy sklep i zaczynamy konfigurować nasz itemshop."]}],[{"l":"Dodawanie zdjęć","p":["Zdjęcia w VIshop dodajemy z zewnętrznych źródeł, sam VIshop nie hostuje żadnych plików dodanych przez użytkowników. Link musi być bezpośrednim linkiem do zdjęcia. W tym poradniku użyjemy do tego darmowego hostingu zdjęć imgur."]},{"l":"Wgrywanie zdjęcia na imgur","p":["Przechodzimy na wyżej wspomnianą stronę imgur i klikamy przycisk \"New post\", który znajduje się lewym górnym rogu. Teraz wgrywamy nasze zdjęcie, możemy wybrać plik z komputera albo wkleić zdjęcie znajdujące się w naszym schowku poprzez kombinację klawiszy ctrl + v.","Po dodaniu zdjęcia klikamy prawym przyciskiem myszy na zdjęcie i wybieramy opcję \"Kopiuj adres obrazu\"."]},{"l":"Dodawanie zdjęcia na VIshop","p":["Przechodzimy do panelu VIshop i w polu dotyczącym zdjęcia wklejamy wcześniej skopiowany bezpośredni link do zdjęcia."]}],[{"l":"FAQ"},{"l":"Często zadawane pytania"},{"i":"ile-kosztuje-vishop","l":"Ile kosztuje VIshop?","p":["VIshop jest w pełni darmowym itemshopem. Nie pobieramy żadnych prowizji, ani opłat"]},{"i":"jak-wgrać-plugin-na-serwer","l":"Jak wgrać plugin na serwer?","p":["Omawiamy to szczegółowo tutaj"]},{"i":"czy-można-przypisać-własną-domenę","l":"Czy można przypisać własną domenę?","p":["Jest to możliwe tylko dla sklepów premium, jeżeli nie posiadasz premium możesz zrobić przekierowanie."]},{"l":"Jakich operatorów obsługuje VIshop","p":["Na ten moment obsługujemy HotPay, CashBill, Paybylink, PayPal, MicroSMS, IceHost.","Dziękujemy Patrykowi Vizauer za pomoc z integracją płatności ( ͡° ͜ʖ ͡°)"]},{"i":"czy-potrzebuję-działalność-gospodarczą-by-mieć-własny-itemshop","l":"Czy potrzebuję działalność gospodarczą by mieć własny itemshop?","p":["Nie, wystarczy działalność nierejestrowana."]},{"i":"jak-dodać-płatności-psc-bez-działalności-gospodarczej","l":"Jak dodać płatności PSC bez działalności gospodarczej?","p":["Możesz użyć operatora IceHost. W takim przypadku pieniądze idą do wirtualnego portfela i później możemy je sprzedać innym użytkownikom."]},{"i":"dlaczego-dostaję-pieniądze-a-gracze-nie-otrzymują-zakupionych-usług","l":"Dlaczego dostaję pieniądze, a gracze nie otrzymują zakupionych usług?","p":["Powodów może być wiele, najpopularniejszymi problemami są niepoprawna konfiguracja pluginu i niepoprawne skonfigurowanie webhooka."]},{"i":"z-jakich-technologii-korzysta-vishop","l":"Z jakich technologii korzysta VIshop?","p":["HTML, CSS, JavaScript, Vue, Vuetify, Python, Django + Django Rest Framework, MySQL oraz Java (do pluginu mc)"]}],[{"l":"Konfiguracja operatora IceHost"},{"l":"Konfiguracja IceHost","p":["Wchodzimy na panel IceHost. Następnie wybieramy zakladkę \" Klucze API\". Po wybraniu zakładki nazywamy klucz (np. vishop), zostawiamy puste pole \"Dopuszczone IP\". Powinno tak to wyglądać: Następnie klikamy \"Utwórz\" i wyświetli się klucz, który trzeba skopiować."]},{"l":"Konfiguracja Vishop","p":["Wchodzimy do panelu VIshop i wybieramy sklep. Wchodzimy w \"Operatorzy Płatności\" i klikamy \"Dodaj operatora płatności\". Następnie wybieramy Operatora płatności IceHost i nazywamy go (np. IceHost). Powinno tak to wyglądać Następnie w polu \"Sekret\" wpisujemy skopiowany klucz API i klikamy dodaj."]}],[{"l":"Konfiguracja operatora PayPal"},{"l":"Konfiguracja","p":["Szczegółowy poradnik video dotyczący konfiguracji operatora PayPal znajduje się pod tym linkiem."]},{"i":"dlaczego-nie-działa-pomimo-poprawnych-danych","l":"Dlaczego nie działa, pomimo poprawnych danych?","p":["Jeżeli wprowadzone w VIshop dane operatora PayPal są poprawne, a operator nadal nie działa najprawdopodobniej nie wybrano opcji live podczas konfiguracji i operatora działa w trybie sandbox. Należy to zmienić wybierając opcję live, będzie to wymagało ulepszenia konta do konta biznesowego. Firma nie jest jednak potrzebna, wystarczy skonfigurować konto biznesowe jako działalność nierejestrowana. W nazwie firmy dajemy imie nazwisko działalność nierejestrowana."]}],[{"l":"Plugin VIshop"},{"l":"Instalacja","p":["Pobieramy najnowszą wersję pluginu z tej strony. Dokładne informacje na temat wspieranych przez plugin wersji i silników dostępne sa w ReadME pluginu, które możesz sprawdzić tutaj. Następnie dodajemy plugin na nasz serwer Minecraft. Po dodaniu pluginu na serwer należy zrestartować serwer."]},{"l":"Konfiguracja","p":["Nieskonfigurowany plugin będzie wyświetlał się na czerwono w liście pluginów. Do poprawnego działania musimy skonfigurować plugin.","W folderze plugins przechodzimy do folderu ViShopPlugin, a następnie otwieramy plik config.yml. Znajdują się tam trzy zmienne, które musimy uzupełnić.","Nazwa pola","Wymagana wartość pola","apiKey","Klucz api, który znajduje się w panelu VIshop, w zakładce ustawienia.","shopId","ID sklepu, znajdziesz je w głównej zakładce panelu VIshop.","serverId","ID serwera, znajduje się w panelu VIshop, w zakładce serwery.","Po skonfigurowaniu pluginu zapisujemy plik config.yml i restartujemy serwer.","Bardzo ważne jest, aby serwer został zrestartowany. Nie używamy do tego komendy /reload, ani innych pluginów odpowiedzialnych za \"restartowanie\" serwera."]},{"l":"Testowanie pluginu","p":["W celu przetestowania pluginu należy wygenerować voucher w sklepie i go wykorzystać. Jeżeli w produkcie, dla którego został wygenerowany voucher jest zaznaczony wymóg bycia online to gracz z podanym w realizacji vouchera nickiem musi być na serwerze. Po zrealizowaniu vouchera status transakcji zmieni się na wykonywanie, a następnie po maksymalnie 30 sekundach na wykonano. Jeżeli tak się nie stało oznacza to, że plugin VIshop nie działa poprawnie."]},{"l":"Naprawianie pluginu","p":["W przypadku, gdy plugin nie działa poprawnie to w konsoli pokazują się odpowiednie komunikaty. Komunikaty te znajdują się również w logach serwera. Należy poprawić konfigurację pluginu."]}],[{"l":"Podpinanie domeny"},{"l":"Konfiguracja domeny w panelu VIshop","p":["W celu podpięcia domeny udaj się do ustawień sklepu, gdzie znajdziesz pole podpisane jako \"Własna domena\" i wpisz tam swoją domenę, po czym kliknij przycisk \"zapisz\"."]},{"l":"Tworzenie rekordu CNAME","p":["Następnie wejdź na panel swojego dostawcy domeny (w naszym przypadku jest to Cloudflare), wybierz swoją domenę i przejdź do sekcji DNS. Utwórz nowy rekord typu CNAME i ustaw go na vishop.pl, nazwa rekordu powinna być taka jest w panelu VIshop. Na przykład, gdy w panelu VIshop wpiszemy sklep.vishop.pl to nazwą rekordu CNAME jest sklep.. Oczywiście, zamiast sklep.vishop.pl wpisujemy swoją (sub)domenę."]},{"l":"Tworzenie rekordu TXT","p":["Jeżeli korzystasz z Cloudflare to na tym etapie możesz zakończyć konfigurację domeny. Rekordy TXT nie są wymagane w przypadku korzystania z Cloudflare.","Po dodaniu rekordu CNAME należy stworzyć rekord typu TXT. W tym celu przechodzimy ponownie do panelu VIshop, do zakładki ustawienia. Klikamy \"sprawdź rekordy txt\". Naszym oczom ukaże się nazwa rekordu TXT oraz jego wartość.","Przechodzimy ponownie do panelu operatora domeny i tworzymy nowy rekord DNS z typem TXT.\uD83C\uDF89 Jeżeli poprawnie wykonałeś wszystkie kroki to domena zacznie działać w ciągu maksymalnie kilkunastu godzin."]}],[{"l":"Szablony","p":["VIshop w pakiecie premium oferuje szablony (strony internetowe - front-end połączony z back-endem VIshop), które można hostować u siebie i dowolnie edytować. Aktualnie dostępny jest jeden szablon."]},{"l":"Konfiguracja"},{"l":"Konfiguracja szablonu","p":["Pobieramy szablon z panelu VIshop z zakładki \"szablony\". Otwieramy plik .env, gdzie wpisujemy id naszego sklepu. Teraz otwieramy plik nuxt.config.js i dostosowujemy podstawowe ustawienia pod siebie zgodnie z ich opisem."]},{"l":"Zmiana zdjęć","p":["Aby zmienić tło strony głównej wystarczy wejść w folder assets i podmienić plik background.jpg na swój z taką samą nazwą i tym samym rozszerzeniem.","W celu zmiany ikony strony przechodzimy do folderu static i podmieniamy plik o nazwie favicon.ico na swój z taką samą nazwą."]},{"l":"Logo na stronie głównej","p":["Szablon posiada łatwą możliwość dodania logo (lub dowolnej innej treści jak np. iframe youtube) na stronie głównej po prawej stronie. Wystarczy przejść do pliku pages/index.vue i odkomentować linijkę kodu w której jest tekst \"logo serwera\"."]},{"l":"Ikony w stopce","p":["Należy przejść do pliku components/Footer.vue i pododawać ikony w podanym miejscu według istniejącego już schematu."]},{"l":"Instalacja szablonu","p":["Do poprawnego działania szablonu wymagana jest:","obsługa node.js w wersji do 12 - 16","serwer WWW (zalecamy nginx - w tym poradniku zostanie on wykorzystany)","Szablon będzie działał na:","serwerze VPS","serwerze dedykowanym","hostingu wspierającym node.js"]},{"i":"automatyczna-instalacja-zalecana","l":"Automatyczna instalacja (zalecana)","p":["Automatyczna instalacja szablonu wykorzystuje dockera. Poniższe komendy zostały przygotowane dla systemu ubuntu, ale docker będzie działał na każdym systemie. Najpierw zainstalujmy dockera, jeśli jeszcze go nie mamy - wystarczy wkleić poniższe komendy. sudo apt-get install gnupg ca-certificates lsb-release curl","sudo mkdir -m 0755 -p /etc/apt/keyrings","curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg","echo deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/sudo apt-get install docker-ce docker-ce-cli containerd.io docker-compose-pluginsudo apt-get install docker-ce docker-ce-cli containerd.io docker-compose-pluginlinux/ubuntu $(lsb_release -cs) stable | sudo tee /etc/apt/sources.list.d/docker.list /dev/null","sudo apt-get update","sudo apt-get install docker-ce docker-ce-cli containerd.io docker-compose-plugin","sudo curl -L https://github.com/docker/compose/releases/download/v2.17.0/docker-compose-$(uname -s)-$(uname -m) -o /usr/local/bin/docker-compose","sudo mv /usr/local/bin/docker-compose /usr/bin/docker-compose","sudo chmod +x /usr/bin/docker-compose","Należy teraz przejść do pliku nginx/nginx.conf znajdującego się w naszym szablonie i ustawić domenę sklepu w wyznaczonym miejscu.","Teraz należy przejść do folderu, gdzie jest nasz szablon (tak, abyśmy mieli dostęp do plików dockera) i wpisać poniższe polecenia","docker-compose up -d --build","Na maszynie musi być wolny port 80, aby zadziałało to poprawnie. Jeżeli takowy jest zajęty to albo go zwolnij, albo z pliku docker-compose.yml usuń częśc odpowiedzialną za nginx i do swojego serwera WWW dodaj proxy_pass na http://localhost:3000.","Teraz nasza aplikacja działa poprawnie. Jeżeli będziemy chcieli coś zmienić wystarczy dokonać zmian i wpisać docker stop vishop docker-compose up -d --build W ten sposób nasza aplikacja zostanie zrestartowana i zmiany zostaną wgrane."]},{"i":"ręczna-instalacja-niezalecana","l":"Ręczna instalacja (niezalecana)","p":["Poniższy poradnik został zrealizowany na ubuntu 20."]},{"i":"instalacja-nodejs-oraz-npm","l":"Instalacja node.js oraz npm","p":["Jeżeli nie mamy zainstalowanego node.js lub npm na maszynie to musimy zainstalować. Najpierw wpisujemy polecenie apt-get update, a następnie pobieramy node oraz npm poprzez polecenia:","curl -sL https://deb.nodesource.com/setup_16.x | sudo bash - sudo apt -y install nodejs sudo apt install npm"]},{"l":"Wgrywanie szablonu","p":["Szablon wgrywamy poprzez FTP na maszynę, gdzie będzie on hostowany. Następnie używając SSH przechodzimy do jego lokalizacji ( cd /twoja/lokalizacja/szablonu). Wpisujemy npm install, a po zakończeniu wykonywania owej komendy wpisujemy npm run build, po czym screen i npm run start, a następnie używamy skrótu klawiszowego ctrl+a+d. Nasz szablon działa teraz lokalnie na porcie 3000, pora udostępnić go światu!"]},{"l":"Konfiguracja nginx","p":["Jeżeli nie posiadamy zainstalowanego nginx to wpisujemy apt-get install nginx. Przechodzimy teraz do folderu, gdzie będzie znajdowała się nasza konfiguracja nginx używając polecenia cd /etc/nginx/sites-enabled. Wpisujemy teraz sudo nano vishop i wklejamy następujący config:","Zapisujemy i wychodzimy (ctrl+s, a później ctrl+x). Wpisujemy teraz sudo systemctl start nginx i sudo systemctl restart nginx"]},{"l":"Uruchomienie lokalnie jako dev","p":["Wymagana jest wersja node 12 - 16. Jeżeli mamy już node w takiej wersji to wystarczy pobrać szablon, wejść do niego i wpisać npm install, a następnie npm run dev. Teraz nasz szablon jest uruchomiony w trybie dev i mamy hot swapa, można teraz z łatwością edytować stronę mając podgląd na żywo.","Po zakończeniu edycji szablon instalujemy tak jak normalnie (patrz wyżej)."]}]]